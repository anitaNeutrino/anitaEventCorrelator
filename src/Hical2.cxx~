#include "Hical2.h"

using namespace std;

ClassImp(Hical2)


Hical2::Hical2(){}

double Hical2::isHical(UInt_t eventNumber, int geomCut){
  double a4_hc2a, a4_hc2b;
  whereAreHical(eventNumber, &a4_hc2a, &a4_hc2b);
  
  //  std::cout<<a4_hc2a<<" "<<a4_hc2b<<std::endl;
  return 1;
}

int Hical2::whereAreHical(UInt_t eventNumber, double * angleToA, double * angleToB){
  if(INIT_HICAL==0){
    initHical();
    INIT_HICAL==1;
  }
  ad->getEvent(eventNumber);
  double atime1, alat1, alon1, aalt1, atime2, alat2, alon2, aalt2;
  double btime1, blat1, blon1, balt1, btime2, blat2, blon2, balt2;
  double alat, alon, aalt, blat, blon, balt;
  double frachk;
  
  //for hc2a
  int aentry = hc2ahk_tree->GetEntryNumberWithBestIndex(ad->header()->triggerTime, ad->header()->triggerTime);
  hc2ahk_tree->GetEntry(aentry);

  atime1 = hc2ahk->time;
  alat1  = hc2ahk->lat;
  alon1  = hc2ahk->lon;
  aalt1  = hc2ahk->alt;

  hc2ahk_tree->GetEntry(aentry+1);

  atime2 = hc2ahk->time;
  alat2  = hc2ahk->lat;
  alon2  = hc2ahk->lon;
  aalt2  = hc2ahk->alt;

  frachk = ((double)ad->header()->triggerTime+((double)ad->header()->triggerTimeNs/1000000000.)-atime1)/(atime2-atime1);

  alat = (frachk*(alat2-alat1))+alat1;
  alon = (frachk*(alon2-alon1))+alon1;
  aalt = (frachk*(aalt2-aalt1))+aalt1;
  
  *angleToA = angleToThing(alat, alon, ad->gps()->latitude, ad->gps()->longitude);

  //for hc2b
  int bentry = hc2bhk_tree->GetEntryNumberWithBestIndex(ad->header()->triggerTime, ad->header()->triggerTime);
  hc2bhk_tree->GetEntry(bentry);

  btime1 = hc2bhk->time;
  blat1  = hc2bhk->lat;
  blon1  = hc2bhk->lon;
  balt1  = hc2bhk->alt;

  hc2bhk_tree->GetEntry(bentry+1);

  btime2 = hc2bhk->time;
  blat2  = hc2bhk->lat;
  blon2  = hc2bhk->lon;
  balt2  = hc2bhk->alt;

  frachk = ((double)ad->header()->triggerTime+((double)ad->header()->triggerTimeNs/1000000000.)-btime1)/(btime2-btime1);

  blat = (frachk*(blat2-blat1))+blat1;
  blon = (frachk*(blon2-blon1))+blon1;
  balt = (frachk*(balt2-balt1))+balt1;
  
  *angleToB = angleToThing(blat, blon, ad->gps()->latitude, ad->gps()->longitude);
  
  
  return 1;
}

double Hical2::dPhi(int aorb, int peak){
  return .5;
}

int Hical2::initHical(){
  ad = new AnitaDataset(157);

  char filename[1000];
  char *dir=getenv("ANITA_UTIL_INSTALL_DIR");

  sprintf(filename,"%s/share/anitaCalib/hc2ahk.root",dir);
  TFile *hc2ahk_file = TFile::Open(filename);
  hc2ahk_tree = (TTree*)hc2ahk_file->Get("tree");
  hc2ahk_tree->SetBranchAddress("hktree", &hc2ahk);
  hc2ahk_tree->BuildIndex("hktree.time");

  sprintf(filename, "%s/share/anitaCalib/hc2bhk.root",dir);
  TFile *hc2bhk_file = TFile::Open(filename);
  hc2bhk_tree = (TTree*)hc2bhk_file->Get("tree");
  hc2bhk_tree->SetBranchAddress("hktree", &hc2bhk);
  hc2bhk_tree->BuildIndex("hktree.time");
  
  return 1;
}


double Hical2::angleToThing(double a4lat, double a4lon, double hclat, double hclon){
  double lat1=deg2rad(a4lat);
  double lat2=deg2rad(hclat);
  double lon1 = deg2rad(a4lon);
  double lon2 = deg2rad(hclon);
  double x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1);
  double y = sin(lon2-lon1) * cos(lat2);
  double bearing = atan2(y, x);
  if(bearing<0)bearing=((2.*TMath::Pi())+bearing);
  return rad2deg(bearing);
}

double Hical2::deg2rad(double deg) {
  return (deg * TMath::Pi() / 180.);
}


double Hical2::rad2deg(double rad) {
  return (rad * 180. / TMath::Pi());
}
